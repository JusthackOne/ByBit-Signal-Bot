import { Composer, Scenes, ContextMessageUpdate } from "telegraf";
import { message } from "telegraf/filters";

import { CANCEL_SCENE, PUMP_ROUTES, SESSION_FIELDS } from "../../utils/CONST";
import { deleteFromSession, saveToSession } from "../../utils/session";
import isNumeric from "../../utils/isNumeric";
import deleteMessages from "../../utils/deleteMessages";
import {
  isValidOIPercenteges,
  isValidOIPeriod
} from "../../utils/validateData";
import asyncWrapper from "../../utils/error-handler";
import { getMainPumpText } from "../../utils/texts";

import getPUMPKeyboard from "../../keyboards/PUMP.keyboard";
import getCancelKeyboard from "../../keyboards/main.keyboard copy";
import Config, { IConfig } from "../../models/Config";
import {deleteMessageNext} from "../../middlewares/deleteMessages.middleware";

const sendMessage = new Composer();
sendMessage.hears(PUMP_ROUTES.UP_PERIOD, async (ctx: ContextMessageUpdate) => {
  const configData = (await Config.find().exec())[0];
  const { cancelKeyboard } = getCancelKeyboard();
  await ctx.replyWithHTML(
    `‚è± <b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ä–∞—Å—Ç–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π % - ${configData.pump_growth_period} –º–∏–Ω</b>\n\n –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç 1 –¥–æ 30 –º–∏–Ω—É—Ç`,
    cancelKeyboard
  );

  saveToSession(ctx, SESSION_FIELDS.CHANGE, PUMP_ROUTES.UP_PERIOD);
  await ctx.wizard.next();
});

sendMessage.hears(
  PUMP_ROUTES.DOWN_PERIOD,
  async (ctx: ContextMessageUpdate) => {
    const configData: IConfig = (await Config.find().exec())[0];
    const { cancelKeyboard } = getCancelKeyboard();
    await ctx.replyWithHTML(
      `‚è± <b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–∞—Å—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π % - ${configData.pump_recession_period} –º–∏–Ω</b>\n\n –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç 1 –¥–æ 30 –º–∏–Ω—É—Ç`,
      cancelKeyboard
    );

    saveToSession(ctx, SESSION_FIELDS.CHANGE, PUMP_ROUTES.DOWN_PERIOD);
    await ctx.wizard.next();
  }
);

sendMessage.hears(
  PUMP_ROUTES.UP_PERCENTEGES,
  async (ctx: ContextMessageUpdate) => {
    const configData: IConfig = (await Config.find().exec())[0];
    const { cancelKeyboard } = getCancelKeyboard();
    await ctx.replyWithHTML(
      `üìà <b>–¢–µ–∫—É—â–∏–π % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –ø–∞–º–ø–∞ - ${configData.pump_growth_percentage}%</b>\n\n –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: –æ—Ç 0.1% –¥–æ 100%`,
      cancelKeyboard
    );

    saveToSession(ctx, SESSION_FIELDS.CHANGE, PUMP_ROUTES.UP_PERCENTEGES);
    await ctx.wizard.next();
  }
);

sendMessage.hears(
  PUMP_ROUTES.DOWN_PERCENTEGES,
  async (ctx: ContextMessageUpdate) => {
    const configData: IConfig = (await Config.find().exec())[0];
    const { cancelKeyboard } = getCancelKeyboard();
    const msg = await ctx.replyWithHTML(
      `üìâ <b>–¢–µ–∫—É—â–∏–π % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —à–æ—Ä—Ç–∞ - ${configData.pump_recession_percentage}%</b>\n\n –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: –æ—Ç 0.1% –¥–æ 100%`,
      cancelKeyboard
    );

    saveToSession(ctx, SESSION_FIELDS.CHANGE, PUMP_ROUTES.DOWN_PERCENTEGES);
    await ctx.wizard.next();
  }
);

const changePUMPParam = new Composer();
changePUMPParam.hears(
  CANCEL_SCENE,
  deleteMessageNext,
  asyncWrapper(async (ctx: ContextMessageUpdate) => {
    const config = (await Config.find().exec())[0];
    const { pumpKeyboard } = getPUMPKeyboard();
    const pumpText = getMainPumpText(config);
    await ctx.replyWithHTML("<b>‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è</b>");
    await ctx.replyWithHTML(pumpText, pumpKeyboard);
    return await ctx.scene.leave();
  })
);

changePUMPParam.on(
  message("text"),
  async (ctx: ContextMessageUpdate, next) => {
    const num: string = ctx.message.text;
    const configData: IConfig = (await Config.find().exec())[0];
    let res;
    const { pumpKeyboard } = getPUMPKeyboard();

    if (!isNumeric(num)) {
      await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>`);

      return;
    }

    switch (ctx.session[SESSION_FIELDS.CHANGE]) {
      case PUMP_ROUTES.UP_PERIOD:
        if (!isValidOIPeriod(num)) {
          await ctx.replyWithHTML(
            `<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ!</b>`
          );

          return;
        }

        res = await Config.updateOne(
          { _id: configData._id },
          { pump_growth_period: num }
        );
        await ctx.replyWithHTML(
          `<b>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω - ${num} –º–∏–Ω</b>`,
          pumpKeyboard
        );
        break;
      case PUMP_ROUTES.UP_PERCENTEGES:
        if (!isValidOIPercenteges(num)) {
          await ctx.replyWithHTML(
            `<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ!</b>`
          );

          return;
        }

        res = await Config.updateOne(
          { _id: configData._id },
          { pump_growth_percentage: num }
        );
        await ctx.replyWithHTML(
          `<b>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω % —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω - ${num}%</b>`,
          pumpKeyboard
        );
        break;
      case PUMP_ROUTES.DOWN_PERIOD:
        if (!isValidOIPeriod(num)) {
          await ctx.replyWithHTML(
            `<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ!</b>`
          );

          return;
        }

        res = await Config.updateOne(
          { _id: configData._id },
          { pump_recession_period: num }
        );
        await ctx.replyWithHTML(
          `<b>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –ø–µ—Ä–∏–æ–¥ —Å–ø–∞–¥–∞, —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω - ${num} –º–∏–Ω</b>`,
          pumpKeyboard
        );
        break;

      case PUMP_ROUTES.DOWN_PERCENTEGES:
        if (!isValidOIPercenteges(num)) {
          await ctx.replyWithHTML(
            `<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ!</b>`
          );

          return;
        }

        res = await Config.updateOne(
          { _id: configData._id },
          { pump_recession_percentage: num }
        );
        await ctx.replyWithHTML(
          `<b>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω % –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω - ${num}%</b>`,
          pumpKeyboard
        );
        break;
    }

    return next();
  },

  async (ctx: ContextMessageUpdate) => {
    deleteMessages(ctx, ctx.session[SESSION_FIELDS.DELETE_MESSAGES]);
    deleteFromSession(ctx, SESSION_FIELDS.DELETE_MESSAGES);

    return await ctx.scene.leave();
  }
);

export const SetPUMP = new Scenes.WizardScene(
  "SetPUMP",
  sendMessage,
  changePUMPParam
);
